fastlane_require 'dotenv'
Dotenv.load '.env.secret'

default_platform :mac

platform :mac do
  desc "Bump version and build number and set/update changelog"
  lane :bump do
    prompt_bump_and_changelog
  end

  desc "Tag, build App Store version and deliver, build developer id version and push to GitHub release"
  lane :release do
    # Only release if clean master
    ensure_git_status_clean
    ensure_git_branch(branch: 'master')

    # Remove any previous build artifacts
    clean

    # Get version and changelog
    prompt_bump_and_changelog(read_only: true)
    version = Actions.lane_context[SharedValues::PROMPT_BUMP_AND_CHANGELOG_VERSION]
    changelog = Actions.lane_context[SharedValues::PROMPT_BUMP_AND_CHANGELOG_CHANGELOG_CONTENT]

    # Build App Store and Developer ID versions
    release_app_store
    release_developer_id

    # Add git tag
    add_git_tag(tag: get_version_number)
    push_git_tags

    # Create GitHub release and upload notarized Developer ID binary
    version = last_git_tag
    github_release = set_github_release(
      name: version,
      tag_name: version,
      description: changelog,
      upload_assets: [developer_id_app_path]
    )
  end

  desc "Build to App Store and send to App Store"
  lane :release_app_store do
    match(
      type: 'appstore',
      additional_cert_types: [ 'mac_installer_distribution' ]
    )

    fix_single_target_signing(code_sign_identity: "Apple Distribution")
    gym(
      scheme: 'CrunchyGIF',
      output_directory: 'build/appstore',
      export_method: 'app-store',
    )

    deliver
  end

  desc "Build for developer id and notarize"
  lane :release_developer_id do
    match(
      type: 'developer_id',
      git_branch: 'last-good-developer_id',
      additional_cert_types: [ 'developer_id_installer' ]
    )

    fix_single_target_signing(code_sign_identity: "Developer ID Application")
    gym(
      scheme: 'CrunchyGIFDeveloperID',
      export_method: 'developer-id',
      output_directory: 'build/developerid',
      skip_package_pkg: true
    )

    notarize(
      package: developer_id_app_path
    )
  end

  desc "Remove the build directory"
  lane :clean do
    FileUtils.rm_rf("../build")
  end

  desc "Location of developer id app"
  private_lane :developer_id_app_path do
    app_path = Dir.glob("../build/developerid/*.app").first
    File.absolute_path(app_path)
  end
end
